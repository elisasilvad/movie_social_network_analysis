import json
import networkx as nx
import statistics
import matplotlib.pyplot as plt
import numpy as np

# FOUR FEATHERS
print("------Four Feathers------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Four_Feathers.json", "r", encoding='utf-8') as data:
    Four_Feathers = json.load(data)
print(Four_Feathers)

# Create the movie graph
Four_Feathers_node_names = []
Four_Feathers_edges = []

for i in Four_Feathers['network']['nodes']:
     id = (i['id'])
     Four_Feathers_node_names.append(id)
print(Four_Feathers_node_names)

for i in Four_Feathers['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Four_Feathers_edges.append(tuple)
print(Four_Feathers_edges)

Four_Feathers_G = nx.Graph()
Four_Feathers_G.add_nodes_from(Four_Feathers_node_names)
Four_Feathers_G.add_edges_from(Four_Feathers_edges)
print(nx.info(Four_Feathers_G))

# Create male and female groups
Four_Feathers_female = ['ETHNE', 'CAROLINE']
Four_Feathers_male = []

for m in Four_Feathers_node_names:
    if m not in Four_Feathers_female:
        Four_Feathers_male.append(m)

# Assign gender property to each nodes
# Create empty dictionaries for nodes' attributes
gender = {}

# Set node attributes through nx built-in function allowing to associate each node with attributes.
# The set_node_attributes function takes three variables: the Graph to which youâ€™re adding the attribute,
# the dictionary of id-attribute pairs, and the name of the new attribute.
for n in Four_Feathers_female:
    gender[n] = 'female'

for n in Four_Feathers_male:
    gender[n] = 'male'

nx.set_node_attributes(Four_Feathers_G, gender, 'gender')
print(Four_Feathers_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks = list()
Movie_networks.append(Four_Feathers_G)

# LOST HORIZON
print("------Lost Horizon------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Lost_Horizon.json", "r", encoding='utf-8') as data:
    Lost_Horizon = json.load(data)
print(Lost_Horizon)

# Create the movie graph
Lost_Horizon_node_names = []
Lost_Horizon_edges = []

for i in Lost_Horizon['network']['nodes']:
     id = (i['id'])
     Lost_Horizon_node_names.append(id)
#print(Lost_Horizon_node_names)

for i in Lost_Horizon['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w': w})
        Lost_Horizon_edges.append(tuple)
#print(Lost_Horizon_edges)

Lost_Horizon_G = nx.Graph()
Lost_Horizon_G.add_nodes_from(Lost_Horizon_node_names)
Lost_Horizon_G.add_edges_from(Lost_Horizon_edges)
print(nx.info(Lost_Horizon_G))

# Create male and female groups
Lost_Horizon_female = ['GLORIA', 'SONDRA', 'MARIA', 'NATIVE GIRL']
Lost_Horizon_male = []

for m in Lost_Horizon_node_names:
    if m not in Lost_Horizon_female:
        Lost_Horizon_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Lost_Horizon_female:
    gender[n] = 'female'

for n in Lost_Horizon_male:
    gender[n] = 'male'

nx.set_node_attributes(Lost_Horizon_G, gender, 'gender')
print(Lost_Horizon_G.nodes(data=True))

# Add the graph to movie network list
#Movie_networks = list()
Movie_networks.append(Lost_Horizon_G)
print(Movie_networks)


# IT'S A WONDERFUL LIFE
print("------It's a Wonderful Life------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Wonderful_Life.json", "r", encoding='utf-8') as data:
    Wonderful_Life = json.load(data)
print(Wonderful_Life)

# Create the movie graph
Wonderful_Life_node_names = []
Wonderful_Life_edges = []

for i in Wonderful_Life['network']['nodes']:
     id = (i['id'])
     Wonderful_Life_node_names.append(id)

for i in Wonderful_Life['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Wonderful_Life_edges.append(tuple)

Wonderful_Life_G = nx.Graph()
Wonderful_Life_G.add_nodes_from(Wonderful_Life_node_names)
Wonderful_Life_G.add_edges_from(Wonderful_Life_edges)
print(nx.info(Wonderful_Life_G))

# Create male and female groups
Wonderful_Life_female = ['MARY', 'MOTHER', 'ANNIE', 'WOMAN', 'ZUZU', 'MRS HATCH', 'MRS THOMPSON', 'SECRETARY', 'VIOLET', 'MARIA', 'COUSIN TILLY', 'JANIE', 'RUTH', 'JANE', 'MRS DAVIS', 'MRS BAILEY']
Wonderful_Life_male = []

for m in Wonderful_Life_node_names:
    if m not in Wonderful_Life_female:
        Wonderful_Life_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Wonderful_Life_female:
    gender[n] = 'female'

for n in Wonderful_Life_male:
    gender[n] = 'male'

nx.set_node_attributes(Wonderful_Life_G, gender, 'gender')
print(Wonderful_Life_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Wonderful_Life_G)
print(Movie_networks)


# MR BLANDINGS BUILDS HIS DREAM HOUSE
print("------Mr Blandings Builds His Dream House------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Mr_Blandings.json", "r", encoding='utf-8') as data:
    Mr_Blandings = json.load(data)
print(Mr_Blandings)

# Create the movie graph
Mr_Blandings_node_names = []
Mr_Blandings_edges = []

for i in Mr_Blandings['network']['nodes']:
     id = (i['id'])
     Mr_Blandings_node_names.append(id)

for i in Mr_Blandings['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Mr_Blandings_edges.append(tuple)

Mr_Blandings_G = nx.Graph()
Mr_Blandings_G.add_nodes_from(Mr_Blandings_node_names)
Mr_Blandings_G.add_edges_from(Mr_Blandings_edges)
print(nx.info(Mr_Blandings_G))

# Create male and female groups
Mr_Blandings_female = ['MARY', 'GUSSIE', 'THE GIRLS', 'MURIEL', 'JOAN', 'BETSY']
Mr_Blandings_male = []

for m in Mr_Blandings_node_names:
    if m not in Mr_Blandings_female:
        Mr_Blandings_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Mr_Blandings_female:
    gender[n] = 'female'

for n in Mr_Blandings_male:
    gender[n] = 'male'

nx.set_node_attributes(Mr_Blandings_G, gender, 'gender')
print(Mr_Blandings_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Mr_Blandings_G)
print(Movie_networks)


# GUNSMOKE
print("------Gunsmoke------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Gunsmoke.json", "r", encoding='utf-8') as data:
    Gunsmoke = json.load(data)
print(Gunsmoke)

# Create the movie graph
Gunsmoke_node_names = []
Gunsmoke_edges = []

for i in Gunsmoke['network']['nodes']:
     id = (i['id'])
     Gunsmoke_node_names.append(id)

for i in Gunsmoke['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Gunsmoke_edges.append(tuple)

Gunsmoke_G = nx.Graph()
Gunsmoke_G.add_nodes_from(Gunsmoke_node_names)
Gunsmoke_G.add_edges_from(Gunsmoke_edges)
print(nx.info(Gunsmoke_G))

# Create male and female groups
Gunsmoke_female = ['ELAINE', 'MARCIA', 'MARY', 'HELEN', 'MRS WYATT', ]
Gunsmoke_male = []

for m in Gunsmoke_node_names:
    if m not in Gunsmoke_female:
        Gunsmoke_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Gunsmoke_female:
    gender[n] = 'female'

for n in Gunsmoke_male:
    gender[n] = 'male'

nx.set_node_attributes(Gunsmoke_G, gender, 'gender')
print(Gunsmoke_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Gunsmoke_G)
print(Movie_networks)


# WHITE CHRISTMAS
print("------White_Christmas------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/White_Christmas.json", "r", encoding='utf-8') as data:
    White_Christmas = json.load(data)
print(White_Christmas)

# Create the movie graph
White_Christmas_node_names = []
White_Christmas_edges = []

for i in White_Christmas['network']['nodes']:
     id = (i['id'])
     White_Christmas_node_names.append(id)

for i in White_Christmas['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        White_Christmas_edges.append(tuple)

White_Christmas_G = nx.Graph()
White_Christmas_G.add_nodes_from(White_Christmas_node_names)
White_Christmas_G.add_edges_from(White_Christmas_edges)
print(nx.info(White_Christmas_G))

# Create male and female groups
White_Christmas_female = ['SYLVIA', 'MARTHA', 'BETTY', 'RITA', 'GIRLS', 'JUDY', 'SUSAN']
White_Christmas_male = []

for m in White_Christmas_node_names:
    if m not in White_Christmas_female:
        White_Christmas_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in White_Christmas_female:
    gender[n] = 'female'

for n in White_Christmas_male:
    gender[n] = 'male'

nx.set_node_attributes(White_Christmas_G, gender, 'gender')
print(White_Christmas_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(White_Christmas_G)
print(Movie_networks)



# THE MANCHURIAN CANDIDATE
print("------The_Manchurian_Candidate------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/The_Manchurian_Candidate.json", "r", encoding='utf-8') as data:
    The_Manchurian_Candidate = json.load(data)
print(The_Manchurian_Candidate)

# Create the movie graph
The_Manchurian_Candidate_node_names = []
The_Manchurian_Candidate_edges = []

for i in The_Manchurian_Candidate['network']['nodes']:
     id = (i['id'])
     The_Manchurian_Candidate_node_names.append(id)

for i in The_Manchurian_Candidate['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        The_Manchurian_Candidate_edges.append(tuple)

The_Manchurian_Candidate_G = nx.Graph()
The_Manchurian_Candidate_G.add_nodes_from(The_Manchurian_Candidate_node_names)
The_Manchurian_Candidate_G.add_edges_from(The_Manchurian_Candidate_edges)
print(nx.info(The_Manchurian_Candidate_G))

# Create male and female groups
The_Manchurian_Candidate_female = ['MIRELLA', 'ROSIE', 'MYSTERIOUS WOMAN', 'WOMAN', 'JOCELYN', 'ELLIE']
The_Manchurian_Candidate_male = []

for m in The_Manchurian_Candidate_node_names:
    if m not in The_Manchurian_Candidate_female:
        The_Manchurian_Candidate_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in The_Manchurian_Candidate_female:
    gender[n] = 'female'

for n in The_Manchurian_Candidate_male:
    gender[n] = 'male'

nx.set_node_attributes(The_Manchurian_Candidate_G, gender, 'gender')
print(The_Manchurian_Candidate_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(The_Manchurian_Candidate_G)
print(Movie_networks)


# PLANET OF APES
print("------Planet_of_Apes------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Planet_of_Apes.json", "r", encoding='utf-8') as data:
    Planet_of_Apes = json.load(data)
print(Planet_of_Apes)

# Create the movie graph
Planet_of_Apes_node_names = []
Planet_of_Apes_edges = []

for i in Planet_of_Apes['network']['nodes']:
     id = (i['id'])
     Planet_of_Apes_node_names.append(id)

for i in Planet_of_Apes['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Planet_of_Apes_edges.append(tuple)

Planet_of_Apes_G = nx.Graph()
Planet_of_Apes_G.add_nodes_from(Planet_of_Apes_node_names)
Planet_of_Apes_G.add_edges_from(Planet_of_Apes_edges)
print(nx.info(Planet_of_Apes_G))

# Create male and female groups
Planet_of_Apes_female = ['NURSE', 'ZIRA']
Planet_of_Apes_male = []

for m in Planet_of_Apes_node_names:
    if m not in Planet_of_Apes_female:
        Planet_of_Apes_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Planet_of_Apes_female:
    gender[n] = 'female'

for n in Planet_of_Apes_male:
    gender[n] = 'male'

nx.set_node_attributes(Planet_of_Apes_G, gender, 'gender')
print(Planet_of_Apes_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Planet_of_Apes_G)
print(Movie_networks)


# PLANET OF APES
print("------Rocky------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Rocky.json", "r", encoding='utf-8') as data:
    Rocky = json.load(data)
print(Rocky)

# Create the movie graph
Rocky_node_names = []
Rocky_edges = []

for i in Rocky['network']['nodes']:
     id = (i['id'])
     Rocky_node_names.append(id)

for i in Rocky['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Rocky_edges.append(tuple)

Rocky_G = nx.Graph()
Rocky_G.add_nodes_from(Rocky_node_names)
Rocky_G.add_edges_from(Rocky_edges)
print(nx.info(Rocky_G))

# Create male and female groups
Rocky_female = ['MARIE', 'ADRIAN', 'SECRETARY', 'WOMAN', ]
Rocky_male = []

for m in Rocky_node_names:
    if m not in Rocky_female:
        Rocky_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Rocky_female:
    gender[n] = 'female'

for n in Rocky_male:
    gender[n] = 'male'

nx.set_node_attributes(Rocky_G, gender, 'gender')
print(Rocky_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Rocky_G)
print(Movie_networks)


# BARRY LYNDON
print("------Barry_Lyndon------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Barry_Lyndon.json", "r", encoding='utf-8') as data:
    Barry_Lyndon = json.load(data)
print(Barry_Lyndon)

# Create the movie graph
Barry_Lyndon_node_names = []
Barry_Lyndon_edges = []

for i in Barry_Lyndon['network']['nodes']:
     id = (i['id'])
     Barry_Lyndon_node_names.append(id)

for i in Barry_Lyndon['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Barry_Lyndon_edges.append(tuple)

Barry_Lyndon_G = nx.Graph()
Barry_Lyndon_G.add_nodes_from(Barry_Lyndon_node_names)
Barry_Lyndon_G.add_edges_from(Barry_Lyndon_edges)
print(nx.info(Barry_Lyndon_G))

# Create male and female groups
Barry_Lyndon_female = ['COUNTESS', 'DOROTHY', 'AUNT', "MRS O'REILLY", 'CHAMBERMAID', 'MOTHER']
Barry_Lyndon_male = []

for m in Barry_Lyndon_node_names:
    if m not in Barry_Lyndon_female:
        Barry_Lyndon_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Barry_Lyndon_female:
    gender[n] = 'female'

for n in Barry_Lyndon_male:
    gender[n] = 'male'

nx.set_node_attributes(Barry_Lyndon_G, gender, 'gender')
print(Barry_Lyndon_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Barry_Lyndon_G)
print(Movie_networks)


# THE GETAWAY
print("------The_Getaway------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/The_Getaway.json", "r", encoding='utf-8') as data:
    The_Getaway = json.load(data)
print(The_Getaway)

# Create the movie graph
The_Getaway_node_names = []
The_Getaway_edges = []

for i in The_Getaway['network']['nodes']:
     id = (i['id'])
     The_Getaway_node_names.append(id)

for i in The_Getaway['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        The_Getaway_edges.append(tuple)

The_Getaway_G = nx.Graph()
The_Getaway_G.add_nodes_from(The_Getaway_node_names)
The_Getaway_G.add_edges_from(The_Getaway_edges)
print(nx.info(The_Getaway_G))

# Create male and female groups
The_Getaway_female = ['SECRETARY', 'GIRL', 'FRAN', 'CAROL']
The_Getaway_male = []

for m in The_Getaway_node_names:
    if m not in The_Getaway_female:
        The_Getaway_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in The_Getaway_female:
    gender[n] = 'female'

for n in The_Getaway_male:
    gender[n] = 'male'

nx.set_node_attributes(The_Getaway_G, gender, 'gender')
print(The_Getaway_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(The_Getaway_G)
print(Movie_networks)


# GREMLINS
print("------Gremlins------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Gremlins.json", "r", encoding='utf-8') as data:
    Gremlins = json.load(data)
print(Gremlins)

# Create the movie graph
Gremlins_node_names = []
Gremlins_edges = []

for i in Gremlins['network']['nodes']:
     id = (i['id'])
     Gremlins_node_names.append(id)

for i in Gremlins['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Gremlins_edges.append(tuple)

Gremlins_G = nx.Graph()
Gremlins_G.add_nodes_from(Gremlins_node_names)
Gremlins_G.add_edges_from(Gremlins_edges)
print(nx.info(Gremlins_G))

# Create male and female groups
Gremlins_female = ['LYNN', 'PEGGY', 'MOTHER', 'MRS DEAGLE', 'TRACY', 'STEWARDESS']
Gremlins_male = []

for m in Gremlins_node_names:
    if m not in Gremlins_female:
        Gremlins_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Gremlins_female:
    gender[n] = 'female'

for n in Gremlins_male:
    gender[n] = 'male'

nx.set_node_attributes(Gremlins_G, gender, 'gender')
print(Gremlins_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Gremlins_G)
print(Movie_networks)


# HARD TO KILL
print("------Hard_To_Kill------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Hard_To_Kill.json", "r", encoding='utf-8') as data:
    Hard_To_Kill = json.load(data)
print(Hard_To_Kill)

# Create the movie graph
Hard_To_Kill_node_names = []
Hard_To_Kill_edges = []

for i in Hard_To_Kill['network']['nodes']:
     id = (i['id'])
     Hard_To_Kill_node_names.append(id)

for i in Hard_To_Kill['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Hard_To_Kill_edges.append(tuple)

Hard_To_Kill_G = nx.Graph()
Hard_To_Kill_G.add_nodes_from(Hard_To_Kill_node_names)
Hard_To_Kill_G.add_edges_from(Hard_To_Kill_edges)
print(nx.info(Hard_To_Kill_G))

# Create male and female groups
Hard_To_Kill_female = ['HOUSEWIFE', 'ANDY', 'FELICIA', 'MARTHA', 'MRS WADE', 'OLD LADY']
Hard_To_Kill_male = []

for m in Hard_To_Kill_node_names:
    if m not in Hard_To_Kill_female:
        Hard_To_Kill_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Hard_To_Kill_female:
    gender[n] = 'female'

for n in Hard_To_Kill_male:
    gender[n] = 'male'

nx.set_node_attributes(Hard_To_Kill_G, gender, 'gender')
print(Hard_To_Kill_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Hard_To_Kill_G)
print(Movie_networks)


# TOP GUN
print("------Top_Gun------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Top_Gun.json", "r", encoding='utf-8') as data:
    Top_Gun = json.load(data)
print(Top_Gun)

# Create the movie graph
Top_Gun_node_names = []
Top_Gun_edges = []

for i in Top_Gun['network']['nodes']:
     id = (i['id'])
     Top_Gun_node_names.append(id)

for i in Top_Gun['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Top_Gun_edges.append(tuple)

Top_Gun_G = nx.Graph()
Top_Gun_G.add_nodes_from(Top_Gun_node_names)
Top_Gun_G.add_edges_from(Top_Gun_edges)
print(nx.info(Top_Gun_G))

# Create male and female groups
Top_Gun_female = ['GIRL', 'FIRST GIRL', 'SECOND GIRL', 'CHARLIE', 'CAROL']
Top_Gun_male = []

for m in Top_Gun_node_names:
    if m not in Top_Gun_female:
        Top_Gun_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Top_Gun_female:
    gender[n] = 'female'

for n in Top_Gun_male:
    gender[n] = 'male'

nx.set_node_attributes(Top_Gun_G, gender, 'gender')
print(Top_Gun_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Top_Gun_G)
print(Movie_networks)


# RAISING ARIZONA
print("------Raising_Arizona------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Raising_Arizona.json", "r", encoding='utf-8') as data:
    Raising_Arizona = json.load(data)
print(Raising_Arizona)

# Create the movie graph
Raising_Arizona_node_names = []
Raising_Arizona_edges = []

for i in Raising_Arizona['network']['nodes']:
     id = (i['id'])
     Raising_Arizona_node_names.append(id)

for i in Raising_Arizona['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Raising_Arizona_edges.append(tuple)

Raising_Arizona_G = nx.Graph()
Raising_Arizona_G.add_nodes_from(Raising_Arizona_node_names)
Raising_Arizona_G.add_edges_from(Raising_Arizona_edges)
print(nx.info(Raising_Arizona_G))

# Create male and female groups
Raising_Arizona_female = ['FLORENCE', 'CASHIER', 'SECRETARY', 'WOMAN']
Raising_Arizona_male = []

for m in Raising_Arizona_node_names:
    if m not in Raising_Arizona_female:
        Raising_Arizona_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Raising_Arizona_female:
    gender[n] = 'female'

for n in Raising_Arizona_male:
    gender[n] = 'male'

nx.set_node_attributes(Raising_Arizona_G, gender, 'gender')
print(Raising_Arizona_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Raising_Arizona_G)
print(Movie_networks)


# BABETTE'S FEAST
print("------Babette_Feast------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Babette_Feast.json", "r", encoding='utf-8') as data:
    Babette_Feast = json.load(data)
print(Babette_Feast)

# Create the movie graph
Babette_Feast_node_names = []
Babette_Feast_edges = []

for i in Babette_Feast['network']['nodes']:
     id = (i['id'])
     Babette_Feast_node_names.append(id)

for i in Babette_Feast['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Babette_Feast_edges.append(tuple)

Babette_Feast_G = nx.Graph()
Babette_Feast_G.add_nodes_from(Babette_Feast_node_names)
Babette_Feast_G.add_edges_from(Babette_Feast_edges)
print(nx.info(Babette_Feast_G))

# Create male and female groups
Babette_Feast_female = ['HEROINE', 'LITTLE GIRL', 'GRANDMA', 'BELLE']
Babette_Feast_male = []

for m in Babette_Feast_node_names:
    if m not in Babette_Feast_female:
        Babette_Feast_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Babette_Feast_female:
    gender[n] = 'female'

for n in Babette_Feast_male:
    gender[n] = 'male'

nx.set_node_attributes(Babette_Feast_G, gender, 'gender')
print(Babette_Feast_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Babette_Feast_G)
print(Movie_networks)


# AMADEUS
print("------Amadeus------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Amadeus.json", "r", encoding='utf-8') as data:
    Amadeus = json.load(data)
print(Amadeus)

# Create the movie graph
Amadeus_node_names = []
Amadeus_edges = []

for i in Amadeus['network']['nodes']:
     id = (i['id'])
     Amadeus_node_names.append(id)

for i in Amadeus['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Amadeus_edges.append(tuple)

Amadeus_G = nx.Graph()
Amadeus_G.add_nodes_from(Amadeus_node_names)
Amadeus_G.add_edges_from(Amadeus_edges)
print(nx.info(Amadeus_G))

# Create male and female groups
Amadeus_female = ['SECOND LADY', 'LORL', 'FRAU SCHLUMBERG', 'MADAME WEBER', 'CONSTANZE', 'ACTRESSES', 'CAVALIERI', 'GERTRUDE', 'THIRD LADY', 'THREE LADIES', 'FIRST LADY', 'UGLY OLD WOMAN', ]
Amadeus_male = []

for m in Amadeus_node_names:
    if m not in Amadeus_female:
        Amadeus_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Amadeus_female:
    gender[n] = 'female'

for n in Amadeus_male:
    gender[n] = 'male'

nx.set_node_attributes(Amadeus_G, gender, 'gender')
print(Amadeus_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Amadeus_G)
print(Movie_networks)



# ESCAPE FROM NEW YORK
print("------Escape_From_New_York------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Escape_From_New_York.json", "r", encoding='utf-8') as data:
    Escape_From_New_York = json.load(data)
print(Escape_From_New_York)

# Create the movie graph
Escape_From_New_York_node_names = []
Escape_From_New_York_edges = []

for i in Escape_From_New_York['network']['nodes']:
     id = (i['id'])
     Escape_From_New_York_node_names.append(id)

for i in Escape_From_New_York['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Escape_From_New_York_edges.append(tuple)

Escape_From_New_York_G = nx.Graph()
Escape_From_New_York_G.add_nodes_from(Escape_From_New_York_node_names)
Escape_From_New_York_G.add_edges_from(Escape_From_New_York_edges)
print(nx.info(Escape_From_New_York_G))

# Create male and female groups
Escape_From_New_York_female = ['MAGGIE', "GIRL IN CHOCK FULL O' NUTS"]
Escape_From_New_York_male = []

for m in Escape_From_New_York_node_names:
    if m not in Escape_From_New_York_female:
        Escape_From_New_York_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Escape_From_New_York_female:
    gender[n] = 'female'

for n in Escape_From_New_York_male:
    gender[n] = 'male'

nx.set_node_attributes(Escape_From_New_York_G, gender, 'gender')
print(Escape_From_New_York_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Escape_From_New_York_G)
print(Movie_networks)


# BATMAN
print("------Batman------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Batman.json", "r", encoding='utf-8') as data:
    Batman = json.load(data)
print(Batman)

# Create the movie graph
Batman_node_names = []
Batman_edges = []

for i in Batman['network']['nodes']:
     id = (i['id'])
     Batman_node_names.append(id)

for i in Batman['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Batman_edges.append(tuple)

Batman_G = nx.Graph()
Batman_G.add_nodes_from(Batman_node_names)
Batman_G.add_edges_from(Batman_edges)
print(nx.info(Batman_G))

# Create male and female groups
Batman_female = ['ANCHORWOMAN', 'ALICIA', 'MIRANDA', 'CLAIRE', 'VICKI']
Batman_male = []

for m in Batman_node_names:
    if m not in Batman_female:
        Batman_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Batman_female:
    gender[n] = 'female'

for n in Batman_male:
    gender[n] = 'male'

nx.set_node_attributes(Batman_G, gender, 'gender')
print(Batman_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Batman_G)
print(Movie_networks)


# KUNDUN
print("------Kundun------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Kundun.json", "r", encoding='utf-8') as data:
    Kundun = json.load(data)
print(Kundun)

# Create the movie graph
Kundun_node_names = []
Kundun_edges = []

for i in Kundun['network']['nodes']:
     id = (i['id'])
     Kundun_node_names.append(id)

for i in Kundun['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Kundun_edges.append(tuple)

Kundun_G = nx.Graph()
Kundun_G.add_nodes_from(Kundun_node_names)
Kundun_G.add_edges_from(Kundun_edges)
print(nx.info(Kundun_G))

# Create male and female groups
Kundun_female = ['MOTHER', 'OLD WOMAN', 'TIBETAN WOMAN']
Kundun_male = []

for m in Kundun_node_names:
    if m not in Kundun_female:
        Kundun_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Kundun_female:
    gender[n] = 'female'

for n in Kundun_male:
    gender[n] = 'male'

nx.set_node_attributes(Kundun_G, gender, 'gender')
print(Kundun_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Kundun_G)
print(Movie_networks)


# LOST IN SPACE
print("------Lost_In_Space------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Lost_In_Space.json", "r", encoding='utf-8') as data:
    Lost_In_Space = json.load(data)
print(Lost_In_Space)

# Create the movie graph
Lost_In_Space_node_names = []
Lost_In_Space_edges = []

for i in Lost_In_Space['network']['nodes']:
     id = (i['id'])
     Lost_In_Space_node_names.append(id)

for i in Lost_In_Space['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Lost_In_Space_edges.append(tuple)

Lost_In_Space_G = nx.Graph()
Lost_In_Space_G.add_nodes_from(Lost_In_Space_node_names)
Lost_In_Space_G.add_edges_from(Lost_In_Space_edges)
print(nx.info(Lost_In_Space_G))

# Create male and female groups
Lost_In_Space_female = ['REPORTER', 'PENNY', 'MAUREEN', 'PRINCIPAL', 'ANNIE', 'JUDY']
Lost_In_Space_male = []

for m in Lost_In_Space_node_names:
    if m not in Lost_In_Space_female:
        Lost_In_Space_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Lost_In_Space_female:
    gender[n] = 'female'

for n in Lost_In_Space_male:
    gender[n] = 'male'

nx.set_node_attributes(Lost_In_Space_G, gender, 'gender')
print(Lost_In_Space_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Lost_In_Space_G)
print(Movie_networks)


# FRENCH KISS
print("------French_Kiss------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/French_Kiss.json", "r", encoding='utf-8') as data:
    French_Kiss = json.load(data)
print(French_Kiss)

# Create the movie graph
French_Kiss_node_names = []
French_Kiss_edges = []

for i in French_Kiss['network']['nodes']:
     id = (i['id'])
     French_Kiss_node_names.append(id)

for i in French_Kiss['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        French_Kiss_edges.append(tuple)

French_Kiss_G = nx.Graph()
French_Kiss_G.add_nodes_from(French_Kiss_node_names)
French_Kiss_G.add_edges_from(French_Kiss_edges)
print(nx.info(French_Kiss_G))

# Create male and female groups
French_Kiss_female = ["JUDGE HILLIER'S WIFE", 'CLAIRE', 'GIRL #1', 'MATRON', 'LILLIAN', 'CONNIE', 'GIRL #2', 'OLDER NURSE', 'NURSE WITH HYPO', 'WOMAN', 'NURSE', 'WARDROBE MISTRESS', 'WOMEN IN WARD', 'YOUNG NURSE']
French_Kiss_male = []

for m in French_Kiss_node_names:
    if m not in French_Kiss_female:
        French_Kiss_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in French_Kiss_female:
    gender[n] = 'female'

for n in French_Kiss_male:
    gender[n] = 'male'

nx.set_node_attributes(French_Kiss_G, gender, 'gender')
print(French_Kiss_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(French_Kiss_G)
print(Movie_networks)


# JACKIE BROWN
print("------Jackie_Brown------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Jackie_Brown.json", "r", encoding='utf-8') as data:
    Jackie_Brown = json.load(data)
print(Jackie_Brown)

# Create the movie graph
Jackie_Brown_node_names = []
Jackie_Brown_edges = []

for i in Jackie_Brown['network']['nodes']:
     id = (i['id'])
     Jackie_Brown_node_names.append(id)

for i in Jackie_Brown['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Jackie_Brown_edges.append(tuple)

Jackie_Brown_G = nx.Graph()
Jackie_Brown_G.add_nodes_from(Jackie_Brown_node_names)
Jackie_Brown_G.add_edges_from(Jackie_Brown_edges)
print(nx.info(Jackie_Brown_G))

# Create male and female groups
Jackie_Brown_female = ['NICOLE', 'WANDA', 'AMY', 'ANITA', 'MELANI', 'MELANIE', 'SHERONDA', 'JACKIE', 'YOUNG GIRL', 'SALESGIRL']
Jackie_Brown_male = []

for m in Jackie_Brown_node_names:
    if m not in Jackie_Brown_female:
        Jackie_Brown_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Jackie_Brown_female:
    gender[n] = 'female'

for n in Jackie_Brown_male:
    gender[n] = 'male'

nx.set_node_attributes(Jackie_Brown_G, gender, 'gender')
print(Jackie_Brown_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Jackie_Brown_G)
print(Movie_networks)


# THE MATRIX
print("------The_Matrix------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/The_Matrix.json", "r", encoding='utf-8') as data:
    The_Matrix = json.load(data)
print(The_Matrix)

# Create the movie graph
The_Matrix_node_names = []
The_Matrix_edges = []

for i in The_Matrix['network']['nodes']:
     id = (i['id'])
     The_Matrix_node_names.append(id)

for i in The_Matrix['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        The_Matrix_edges.append(tuple)

The_Matrix_G = nx.Graph()
The_Matrix_G.add_nodes_from(The_Matrix_node_names)
The_Matrix_G.add_edges_from(The_Matrix_edges)
print(nx.info(The_Matrix_G))

# Create male and female groups
The_Matrix_female = ['ORACLE', 'WOMAN', 'TRINITY', 'SWITCH', 'DUJOUR', 'PRIESTESS']
The_Matrix_male = []

for m in The_Matrix_node_names:
    if m not in The_Matrix_female:
        The_Matrix_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in The_Matrix_female:
    gender[n] = 'female'

for n in The_Matrix_male:
    gender[n] = 'male'

nx.set_node_attributes(The_Matrix_G, gender, 'gender')
print(The_Matrix_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(The_Matrix_G)
print(Movie_networks)


# ENEMY OF THE STATE
print("------Enemy_Of_The_State------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Enemy_Of_The_State.json", "r", encoding='utf-8') as data:
    Enemy_Of_The_State = json.load(data)
print(Enemy_Of_The_State)

# Create the movie graph
Enemy_Of_The_State_node_names = []
Enemy_Of_The_State_edges = []

for i in Enemy_Of_The_State['network']['nodes']:
     id = (i['id'])
     Enemy_Of_The_State_node_names.append(id)

for i in Enemy_Of_The_State['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Enemy_Of_The_State_edges.append(tuple)

Enemy_Of_The_State_G = nx.Graph()
Enemy_Of_The_State_G.add_nodes_from(Enemy_Of_The_State_node_names)
Enemy_Of_The_State_G.add_edges_from(Enemy_Of_The_State_edges)
print(nx.info(Enemy_Of_The_State_G))

# Create male and female groups
Enemy_Of_The_State_female = ['MARTHA', 'CHRISTA', 'RACHEL', 'WOMAN', 'YOUNG WOMAN', 'BYSTANDER', 'JENNY', 'MEG', 'NANNY', 'SAL', 'STACY', 'REYNOLDS WIFE']
Enemy_Of_The_State_male = []

for m in Enemy_Of_The_State_node_names:
    if m not in Enemy_Of_The_State_female:
        Enemy_Of_The_State_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Enemy_Of_The_State_female:
    gender[n] = 'female'

for n in Enemy_Of_The_State_male:
    gender[n] = 'male'

nx.set_node_attributes(Enemy_Of_The_State_G, gender, 'gender')
print(Enemy_Of_The_State_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Enemy_Of_The_State_G)
print(Movie_networks)


# ONE EIGHT SEVEN
print("------One_Eight_Seven------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/One_Eight_Seven.json", "r", encoding='utf-8') as data:
    One_Eight_Seven = json.load(data)
print(One_Eight_Seven)

# Create the movie graph
One_Eight_Seven_node_names = []
One_Eight_Seven_edges = []

for i in One_Eight_Seven['network']['nodes']:
     id = (i['id'])
     One_Eight_Seven_node_names.append(id)

for i in One_Eight_Seven['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        One_Eight_Seven_edges.append(tuple)

One_Eight_Seven_G = nx.Graph()
One_Eight_Seven_G.add_nodes_from(One_Eight_Seven_node_names)
One_Eight_Seven_G.add_edges_from(One_Eight_Seven_edges)
print(nx.info(One_Eight_Seven_G))

# Create male and female groups
One_Eight_Seven_female = ['ANGLO WOMAN', 'MRS FORD', 'ASIAN GIRL', 'TEACHER #1', 'ELLEN', 'MRS SANCHEZ', 'LAKESIA', 'IRIS', 'RITA', 'SECRETARY']
One_Eight_Seven_male = []

for m in One_Eight_Seven_node_names:
    if m not in One_Eight_Seven_female:
        One_Eight_Seven_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in One_Eight_Seven_female:
    gender[n] = 'female'

for n in One_Eight_Seven_male:
    gender[n] = 'male'

nx.set_node_attributes(One_Eight_Seven_G, gender, 'gender')
print(One_Eight_Seven_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(One_Eight_Seven_G)
print(Movie_networks)


# THE CROW: CITY OF ANGELS
print("------The_Crow------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/The_Crow.json", "r", encoding='utf-8') as data:
    The_Crow = json.load(data)
print(The_Crow)

# Create the movie graph
The_Crow_node_names = []
The_Crow_edges = []

for i in The_Crow['network']['nodes']:
     id = (i['id'])
     The_Crow_node_names.append(id)

for i in The_Crow['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        The_Crow_edges.append(tuple)

The_Crow_G = nx.Graph()
The_Crow_G.add_nodes_from(The_Crow_node_names)
The_Crow_G.add_edges_from(The_Crow_edges)
print(nx.info(The_Crow_G))

# Create male and female groups
The_Crow_female = ['SARAH', 'HOLLY', 'SIBYL', 'GRACE', 'WOMAN', ]
The_Crow_male = []

for m in The_Crow_node_names:
    if m not in The_Crow_female:
        The_Crow_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in The_Crow_female:
    gender[n] = 'female'

for n in The_Crow_male:
    gender[n] = 'male'

nx.set_node_attributes(The_Crow_G, gender, 'gender')
print(The_Crow_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(The_Crow_G)
print(Movie_networks)


# DONNIE BRASCO
print("------Donnie_Brasco------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Donnie_Brasco.json", "r", encoding='utf-8') as data:
    Donnie_Brasco = json.load(data)
print(Donnie_Brasco)

# Create the movie graph
Donnie_Brasco_node_names = []
Donnie_Brasco_edges = []

for i in Donnie_Brasco['network']['nodes']:
     id = (i['id'])
     Donnie_Brasco_node_names.append(id)

for i in Donnie_Brasco['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Donnie_Brasco_edges.append(tuple)

Donnie_Brasco_G = nx.Graph()
Donnie_Brasco_G.add_nodes_from(Donnie_Brasco_node_names)
Donnie_Brasco_G.add_edges_from(Donnie_Brasco_edges)
print(nx.info(Donnie_Brasco_G))

# Create male and female groups
Donnie_Brasco_female = ['JUDY', 'NURSE', 'LOUISE', 'MAGGIE', 'MA GGIE']
Donnie_Brasco_male = []

for m in Donnie_Brasco_node_names:
    if m not in Donnie_Brasco_female:
        Donnie_Brasco_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Donnie_Brasco_female:
    gender[n] = 'female'

for n in Donnie_Brasco_male:
    gender[n] = 'male'

nx.set_node_attributes(Donnie_Brasco_G, gender, 'gender')
print(Donnie_Brasco_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Donnie_Brasco_G)
print(Movie_networks)


# WILD WILD WEST
print("------Wild_Wild_West------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Wild_Wild_West.json", "r", encoding='utf-8') as data:
    Wild_Wild_West = json.load(data)
print(Wild_Wild_West)

# Create the movie graph
Wild_Wild_West_node_names = []
Wild_Wild_West_edges = []

for i in Wild_Wild_West['network']['nodes']:
     id = (i['id'])
     Wild_Wild_West_node_names.append(id)

for i in Wild_Wild_West['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        w = (i['weight'])
        tuple = (s, t, {'w':w})
        Wild_Wild_West_edges.append(tuple)

Wild_Wild_West_G = nx.Graph()
Wild_Wild_West_G.add_nodes_from(Wild_Wild_West_node_names)
Wild_Wild_West_G.add_edges_from(Wild_Wild_West_edges)
print(nx.info(Wild_Wild_West_G))

# Create male and female groups
Wild_Wild_West_female = ['SALOON GIRL', 'MISS EAST', 'DRAGON LADY', 'MISS LIPPENREIDER', 'MUNITIA', 'WOMAN', 'RITA', 'DORA', 'AMAZONIA']
Wild_Wild_West_male = []

for m in Wild_Wild_West_node_names:
    if m not in Wild_Wild_West_female:
        Wild_Wild_West_male.append(m)

# Assign gender property to each nodes
gender = {}
for n in Wild_Wild_West_female:
    gender[n] = 'female'

for n in Wild_Wild_West_male:
    gender[n] = 'male'

nx.set_node_attributes(Wild_Wild_West_G, gender, 'gender')
print(Wild_Wild_West_G.nodes(data=True))

# Add the graph to movie network list
Movie_networks.append(Wild_Wild_West_G)
print(Movie_networks)



# Compute the mean strenght for female-female relationships and female-male relationships
# female-female
Tot_female_strenght = []
Tot_movie_ff_strenght = []

for G in Movie_networks:
    female = list()
    male = list()
    for n in G.nodes():
        if G.nodes[n]['gender'] == 'female':
            female.append(n)
        # elif G.nodes[n]['gender'] == 'male':
        #     male.append(n)
    for f in female:
        for w in female:
            if G.has_edge(f,w):
                Tot_female_strenght.append(G[f][w]['w'])
    Tot_movie_ff_strenght.append(statistics.mean(Tot_female_strenght))

#print(Tot_female_strenght)
print('Average female-female relationship strenght: ', statistics.mean(Tot_movie_ff_strenght)) #/len(Tot_female_strenght))

ff_strenght_distribution = np.array(sorted(Tot_female_strenght))
plt.plot(ff_strenght_distribution)
plt.show()

# male-male
Tot_male_strenght = []
Tot_movie_mm_strenght = []

for G in Movie_networks:
    female = list()
    male = list()
    for n in G.nodes():
        if G.nodes[n]['gender'] == 'male':
            male.append(n)
    for f in male:
        for w in male:
            if G.has_edge(f,w):
                Tot_male_strenght.append(G[f][w]['w'])
    Tot_movie_mm_strenght.append(statistics.mean(Tot_male_strenght))

#print(Tot_male_strenght)
print('Average male-male relationship strenght: ', statistics.mean(Tot_movie_mm_strenght)) #/len(Tot_female_strenght))

mm_strenght_distribution = np.array(sorted(Tot_male_strenght))
plt.plot(mm_strenght_distribution)
plt.show()

# male-female
Tot_strenght = []
Tot_movie_strenght = []

for G in Movie_networks:
    for n in G.nodes():
        for m in G.nodes():
            if G.has_edge(n,m):
                Tot_strenght.append(G[n][m]['w'])
    Tot_movie_strenght.append(statistics.mean(Tot_strenght))


#print(Tot_movie_strenght)
print('Average male-female relationship in all sampled movies is: ', statistics.mean(Tot_movie_strenght))

mf_strenght_distribution = np.array(sorted(Tot_strenght))
y = np.array(Tot_female_strenght)
plt.plot(mf_strenght_distribution)
plt.show()

# movie_mean = np.array(sorted(Tot_movie_strenght))
# # y = np.array(Tot_female_strenght)
# plt.plot(movie_mean)
# plt.show()