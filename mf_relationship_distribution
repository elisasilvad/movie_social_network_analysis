import json
import networkx as nx
import networkx.algorithms.community as nx_comm
import statistics
import matplotlib.pyplot as plt
import numpy as np


# FOUR FEATHERS
print("------Four Feathers------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Four_Feathers.json", "r", encoding='utf-8') as data:
    Four_Feathers = json.load(data)
print(Four_Feathers)

# Create the movie graph
Four_Feathers_node_names = []
Four_Feathers_edges = []

for i in Four_Feathers['network']['nodes']:
     id = (i['id'])
     Four_Feathers_node_names.append(id)
print(Four_Feathers_node_names)

for i in Four_Feathers['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        tuple = (s, t)
        Four_Feathers_edges.append(tuple)
print(Four_Feathers_edges)

Four_Feathers_G = nx.Graph()
Four_Feathers_G.add_nodes_from(Four_Feathers_node_names)
Four_Feathers_G.add_edges_from(Four_Feathers_edges)
print(nx.info(Four_Feathers_G))

#Create a list with all the graphs
Movie_networks = []
Movie_networks.append(Four_Feathers_G)

# Creating a group with only female characters:
Four_Feathers_female = ['ETHNE', 'CAROLINE']
Four_Feathers_male = []

for m in Four_Feathers_node_names:
    if m not in Four_Feathers_female:
        Four_Feathers_male.append(m)

# Calculate modularity
Four_Feathers_modularity = nx_comm.modularity(Four_Feathers_G, [Four_Feathers_male, Four_Feathers_female])
print('Four Feathers Modularity: ', Four_Feathers_modularity)

# Create modularities list
Movie_modularity = []
Movie_modularity.append(Four_Feathers_modularity)


# LOST HORIZON
print("------Lost Horizon------")

# Read the json data in Python - processed in a dictionary structure
with open("data/movies/Lost_Horizon.json", "r", encoding='utf-8') as data:
    Lost_Horizon = json.load(data)
print(Lost_Horizon)

# Create the movie graph
Lost_Horizon_node_names = []
Lost_Horizon_edges = []

for i in Lost_Horizon['network']['nodes']:
     id = (i['id'])
     Lost_Horizon_node_names.append(id)
print(Lost_Horizon_node_names)

for i in Lost_Horizon['network']['edges']:
        s = (i['source'])
        t = (i['target'])
        tuple = (s, t)
        Lost_Horizon_edges.append(tuple)
print(Lost_Horizon_edges)

Lost_Horizon_G = nx.Graph()
Lost_Horizon_G.add_nodes_from(Lost_Horizon_node_names)
Lost_Horizon_G.add_edges_from(Lost_Horizon_edges)
print(nx.info(Lost_Horizon_G))

#Create a list with all the graphs
Movie_networks = []
Movie_networks.append(Lost_Horizon_G)

# Creating a group with only female characters:
Lost_Horizon_female = ['GLORIA', 'SONDRA', 'MARIA', 'NATIVE GIRL']
Lost_Horizon_male = []

for m in Lost_Horizon_node_names:
    if m not in Lost_Horizon_female:
        Lost_Horizon_male.append(m)

# Calculate modularity
Lost_Horizon_modularity = nx_comm.modularity(Lost_Horizon_G, [Lost_Horizon_male, Lost_Horizon_female])
print('Lost Horizon Modularity: ', Lost_Horizon_modularity)

# Create modularities list
Movie_modularity.append(Lost_Horizon_modularity)

# Compute average modularity
Tot_modularity = 0
for mod in range(0, len(Movie_modularity)):
    Tot_modularity = Tot_modularity + Movie_modularity[mod]

Average_modularity = Tot_modularity/len(Movie_modularity)
print("Average modularity: ", Average_modularity)

# Use statistics module to compute modularity mean and standard deviation
print('Modularity mean:', statistics.mean(Movie_modularity))
print('Modularity standard deviation: ', statistics.pstdev(Movie_modularity))

# Visualize mean and sd
# x = np.array(Movie_modularity)
# y = np.power(x, 2) # Effectively y = x**2
# e = np.array(Average_modularity)
# plt.errorbar(x, y, e, linestyle='None', marker='^')
# plt.show()

